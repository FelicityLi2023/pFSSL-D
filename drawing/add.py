# 将未加逗号的矩阵以字符串形式输入
import re

# 将未加逗号的矩阵以字符串形式输入
matrix_string = """
[[1.         0.99896073 0.33056045 0.33440155 0.35943502 0.35398358
  0.23861346 0.24039952 0.26438665 0.27135211]
 [0.99896073 1.         0.33692113 0.34052211 0.37318772 0.36780852
  0.24699628 0.24884889 0.27416253 0.28128824]
 [0.33056045 0.33692113 1.         0.99791467 0.37670159 0.36441457
  0.34692591 0.35033742 0.10861595 0.11297567]
 [0.33440155 0.34052211 0.99791467 1.         0.3743962  0.36232087
  0.33431366 0.33738202 0.10589139 0.11023894]
 [0.35943502 0.37318772 0.37670159 0.3743962  1.         0.99869215
  0.45067805 0.45233971 0.28732312 0.29542792]
 [0.35398358 0.36780852 0.36441457 0.36232087 0.99869215 1.
  0.43957564 0.44108891 0.27915627 0.28733832]
 [0.23861346 0.24699628 0.34692591 0.33431366 0.45067805 0.43957564
  1.         0.99995458 0.30717492 0.31501567]
 [0.24039952 0.24884889 0.35033742 0.33738202 0.45233971 0.44108891
  0.99995458 1.         0.31008875 0.3179287 ]
 [0.26438665 0.27416253 0.10861595 0.10589139 0.28732312 0.27915627
  0.30717492 0.31008875 1.         0.99993223]
 [0.27135211 0.28128824 0.11297567 0.11023894 0.29542792 0.28733832
  0.31501567 0.3179287  0.99993223 1.        ]]
"""

# 修改正则表达式，处理负数和小数点
# 修改正则表达式，处理负数、小数点、以及小数点后没有数字的情况
# 修改正则表达式，匹配完整的数字部分，包括负号和小数
formatted_matrix_string = re.sub(r'(-?\d+\.?\d*)\s+', r'\1, ', matrix_string)
formatted_matrix_string = formatted_matrix_string.replace("]\n [", "],\n [")

print(formatted_matrix_string)